// src/lib/terraform.ts
import fs from 'node:fs/promises';
import path from 'node:path';
import crypto from 'node:crypto';

type Block = { id: string; kind: string; name?: string };

const rand = (n = 6) => crypto.randomBytes(8).toString('hex').slice(0, n);

// Basic name sanitizers for embedding in HCL strings
function sanitizeTagValue(s: string) {
  return s.replace(/"/g, ''); // remove quotes
}
function sanitizeBucketBase(s: string) {
  return s.toLowerCase()
    .replace(/[^a-z0-9.-]/g, '-') // only lower-case letters, numbers, . -
    .replace(/^-+|-+$/g, '');     // trim hyphens
}

export async function writeTerraformProject(blocks: Block[], dir: string) {
  await fs.mkdir(dir, { recursive: true });

  const hasVPC = blocks.some(b => b.kind === 'vpc' || b.kind === 'subnet' || b.kind === 'ec2');
  const hasSubnet = blocks.some(b => b.kind === 'subnet' || b.kind === 'ec2');
  const hasEC2 = blocks.some(b => b.kind === 'ec2');

  const pieces: string[] = [];

  // provider + variables
  pieces.push([
    'terraform {',
    '  required_version = ">= 1.12.2"',
    '  required_providers {',
    '    aws = {',
    '      source  = "hashicorp/aws"',
    '      version = "= 6.8.0"',
    '    }',
    '  }',
    '}',
    '',
    'provider "aws" {',
    '  region  = var.aws_region',
    '  profile = var.aws_profile',
    '}',
    '',
    'variable "aws_region"  { type = string default = "eu-west-1" }',
    'variable "aws_profile" { type = string default = null }',
    ''
  ].join('\n'));

  if (hasVPC || hasSubnet || hasEC2) {
    pieces.push([
      'resource "aws_vpc" "main" {',
      '  cidr_block           = "10.0.0.0/16"',
      '  enable_dns_hostnames = true',
      '  enable_dns_support   = true',
      '  tags = { Name = "infra-designer-vpc" }',
      '}',
      '',
      'resource "aws_internet_gateway" "igw" {',
      '  vpc_id = aws_vpc.main.id',
      '  tags = { Name = "infra-designer-igw" }',
      '}',
      ''
    ].join('\n'));

    // Create a public subnet if diagram contains a subnet or EC2
    if (hasSubnet) {
      pieces.push([
        'resource "aws_subnet" "public" {',
        '  vpc_id                  = aws_vpc.main.id',
        '  cidr_block              = "10.0.1.0/24"',
        '  map_public_ip_on_launch = true',
        '  tags = { Name = "infra-designer-public" }',
        '}',
        '',
        'resource "aws_route_table" "public" {',
        '  vpc_id = aws_vpc.main.id',
        '  route { cidr_block = "0.0.0.0/0" gateway_id = aws_internet_gateway.igw.id }',
        '}',
        '',
        'resource "aws_route_table_association" "public" {',
        '  subnet_id      = aws_subnet.public.id',
        '  route_table_id = aws_route_table.public.id',
        '}',
        ''
      ].join('\n'));
    }
  }

  // Security Groups
  const sgIds: string[] = [];
  let sgIndex = 0;
  for (const b of blocks) {
    if (b.kind !== 'sg') continue;
    const name = sanitizeTagValue(b.name?.trim() || `app-sg-${rand(4)}`);
    pieces.push([
      `resource "aws_security_group" "sg_${sgIndex}" {`,
      `  name        = "${name}"`,
      '  description = "Generated by Infra Designer"',
      '  vpc_id      = aws_vpc.main.id',
      '  ingress { from_port=80 to_port=80 protocol="tcp" cidr_blocks=["0.0.0.0/0"] }',
      '  egress  { from_port=0  to_port=0  protocol="-1"  cidr_blocks=["0.0.0.0/0"] }',
      '}',
      ''
    ].join('\n'));
    sgIds.push(`aws_security_group.sg_${sgIndex}.id`);
    sgIndex++;
  }

  // EC2 AMI (once)
  if (hasEC2) {
    pieces.push([
      '# Amazon Linux 2023 x86_64',
      'data "aws_ami" "al2023" {',
      '  owners      = ["137112412989"]',
      '  most_recent = true',
      '  filter { name = "name" values = ["al2023-ami-*-x86_64"] }',
      '}',
      ''
    ].join('\n'));
  }

  // EC2 instances
  let ec2i = 0;
  for (const b of blocks) {
    if (b.kind !== 'ec2') continue;
    const name = sanitizeTagValue(b.name?.trim() || `ec2-${rand(5)}`);
    const vpcSgIds = sgIds.length > 0 ? `[${sgIds[0]}]` : '[]';
    pieces.push([
      `resource "aws_instance" "ec2_${ec2i}" {`,
      '  ami           = data.aws_ami.al2023.id',
      '  instance_type = "t3.micro"',
      '  subnet_id     = aws_subnet.public.id',
      `  vpc_security_group_ids = ${vpcSgIds}`,
      `  tags = { Name = "${name}" }`,
      '}',
      ''
    ].join('\n'));
    ec2i++;
  }

  // S3 buckets (auto-suffix for uniqueness)
  let s3i = 0;
  for (const b of blocks) {
    if (b.kind !== 's3') continue;
    const base = sanitizeBucketBase(b.name?.trim() || 'infra-designer-bucket');
    const finalName = `${base}-${rand(8)}`;
    const tagName = sanitizeTagValue(b.name ?? finalName);
    pieces.push([
      `resource "aws_s3_bucket" "s3_${s3i}" {`,
      `  bucket = "${finalName}"`,
      `  tags   = { Name = "${tagName}" }`,
      '}',
      ''
    ].join('\n'));
    s3i++;
  }

  await fs.writeFile(path.join(dir, 'main.tf'), pieces.join('\n'));
}

